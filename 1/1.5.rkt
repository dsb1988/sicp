#lang racket
;Бен Битобор придумал тест для проверки интерпретатора на то, с каким порядком вычислений он
;работает, аппликативным или нормальным. Бен определяет такие две процедуры:
(define (p) (p))
(define (test x y)
  (if (= x 0)
      0
      y))
;Затем он вычисляет выражение
(test 0 (p))
;Какое поведение увидит Бен, если интерпретатор использует аппликативный порядок вычислений?
;Какое поведение он увидит, если интерпретатор использует нормальный порядок?

;При аппликативном порядке вычислений сначала вычисляются аргументы, затем применяется 
;процедура к ним, что в данном случае приведет к бесконечной рекурсии функции р.

;При нормальном порядке вычислений значение аргумента не вычисляется до тех пор, пока не 
;понадобится его значение. В данном случае значение р требуется вычислить только в том случае,
;если х != 0, при вызове функции test с аргументами (0 (р)) значение р не понадобится никогда.
 
